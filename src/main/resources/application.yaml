ppojin_gw:
  hostname: http://app.ppojin.localhost:3000
  keycloak:
    uri: http://keycloak.default.svc:8080
    client-secret: xCnEd9eT3rygFJs793RGXupuFIABnsoa
  httpbin:
    uri: http://httpbin-lb.default.svc:8088
  auth:
    uri: http://httpbin-lb.default.svc:8088

spring:
  application:
    name: gateway-service
  security:
    oauth2:
      resource-server:
        jwt:
          issuer-uri: ${ppojin_gw.hostname}/realms/ppojin
          jwk-set-uri: ${ppojin_gw.keycloak.uri}/realms/ppojin/protocol/openid-connect/certs
  cloud:
    gateway:
      routes:
        - id: frontend
          uri: ${ppojin_gw.frontend.uri}
          predicates:
            - Path=/,/index.html,/_next/**,/favicon.ico
        - id: keycloak
          uri: ${ppojin_gw.keycloak.uri}
          predicates:
            - Path=/realms/**,/resources/**,/robots.txt
          filters:
            - name: LoggingFilter
              args:
                preLogger: 'true'
                postLogger: 'true'
                baseMessage: My Custom Message
        - id: http-bin-test
          uri: ${ppojin_gw.httpbin.uri}
          predicates:
            - Path=/test/**
          filters:
            - RewritePath=/test(?<segment>/?.*), $\{segment}
            - name: LoggingFilter
              args:
                preLogger: 'true'
                postLogger: 'true'
                baseMessage: My Custom Message

## TODO: ADD zipkin
#management:
#  tracing:
#    sampling:
#      probability: 1.0
#    propagation:
#      consume: b3
#      produce: b3_multi
#  zipkin:
#    tracing:
#      endpoint: "http://localhost:9411/api/v2/spans"
#
#logging:
#  pattern:
#    level: "%5p [%X{traceId:-},%X{spanId:-}]"

app:
  security:
    clientId: test-api
